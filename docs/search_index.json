[
["index.html", "Course Notes for Social Networking Chapter 1 Prerequisites 1.1 R 1.2 STATNET and igraph 1.3 networkdata and devtools", " Course Notes for Social Networking Zack W. Almquist 2017-12-29 Chapter 1 Prerequisites This is a set of course notes for SOCIOLOGY 3412: Social Networking. All examples are written in the R Statistical programing language. It is recommended that you use R-Studio as your IDE for this course as it is the one that will be demonstrated in lecture. 1.1 R R is a statistical programming language that is popular in industry and acadamia. It is open source and has very powerful tools for analysis and visualization. I recommend running yourself through an online tutorial before the course begins. A popular one is run by DataCamp and is free and can be found here. However, there are a number of alternatives, all of which can be found on google. 1.2 STATNET and igraph We will be using the following packages from the STATNET project: install.packages(&#39;network&#39;) install.packages(&#39;ergm&#39;) install.packages(&#39;sna&#39;) install.packages(&#39;EpiModel) We will also on occasion make use of the igraph package: install.packages(&#39;igraph&#39;) 1.3 networkdata and devtools We will occasionally use packages created by the author and installed via github. To do this you will first need to install devtools: install.packages(&quot;devtools&quot;) Then you can install the networkdata package and other packages created for this course as needed, e.g., library(devtools) install_github(&quot;zalmquist/networkdata&quot;) "],
["IntroNetworks.html", "Chapter 2 Networks and Network Thinking 2.1 Overview 2.2 Introduction to Network Concepts 2.3 Relational Data 2.4 STATNET Overview", " Chapter 2 Networks and Network Thinking 2.1 Overview Network science and social network analysis provide both a theoretical and methodological foundation for understanding our social world. Butts (2008) explains the social network field as follows: The social network field is an interdisciplinary research program which seeks to predict the structure of relation- ships among social entities, as well as the impact of said structure on other social phenomena. The substantive elements of this program are built around a shared chore of concepts and methods for the measurement, representation, and analysis of social structure. These techniques (jointly referred to as the methods of social network analysis) are applicable to a wide range of substantive domains, ranging from the analysis of concepts within mental models (Wegner (1995),Carley (1997)) to the study of war between nations (Wimmer and Min (2006)) 2.2 Introduction to Network Concepts To begin our journey into the nature of social networks, we first must define what a relationship entails. Definition 2.1 Relationship: an irreducible property of two or more entities (compare with properties of entities alone or so called “attributes”). Example 2.1 An example of a relationship is students alma matters. I.e. Bill graduated from the University of California, Irvine and Jane graduated from University of California, Irvine so they have a this “alma matter” relationship; however, Bob graduated from University of Michigan so he is not have this “alma matter” relationship with Bill and Jane. Other examples of relationships can be communication, acquaintanceship, sexual contact, proximity, migration rate, alliance/conflict, etc. Focus: the properties and consequences of relations (rather than individual properties) * Entities can be persons, non-human animals, groups, locations, organizations, regions, etc. * Relationships can be communication, acquaintanceship, sexual contact, proximity, migration rates, alliance/conflict, etc. * Social network analysis: the study of relational data arising from social systems Definition 2.2 Social network analysis: the study of relational data arising from social systems (e.g., schools, prisons, countries,…). Definition 2.3 Network: a collection of entities (commonly called nodes or vertices), together with a set of relations on those entities (often called edges or ties). Entities: nodes, or vertices Relations: edges, or ties (sometimes authors will distinguish between tie and edge, however this is somewhat uncommon) Focus on dyadic relations Directed vs. undirected May be signed or valued Definition 2.4 Graph: a set of vertices (\\(V\\)) together with a set of edges (\\(E\\)) – mathematical representation of social structure. Typically a graph, \\(G\\), is define as the set, \\(G=(V,E)\\) Below is R code for generating a dyad and ploting it. The vertex set coorisponds to the number of rows/columns and the edges (relationships) to the cells in the matrix. More on this in the next section. library(sna) g&lt;-matrix(1,nc=2,nr=2) gplot(g) 2.2.1 Set theoretic notation versus Matrix Notation A nework is often represented as a mathematical graph (\\(G\\)), such that \\(V= \\{v_1,\\dots,v_n\\}\\) and \\(E\\) is the set of \\(i,j\\) vertices that have a relation. \\(i,j\\) can be ordered \\((i,j)\\) or unordered \\(\\{i,j\\}\\). Ordered ties represent directed relations (e.g., sending a package) and unordered represent a recipricol relation (e.g., a facebook friendship). Alternatively, graphs can be represented simply as a square matrix of binary values (i.e., does a relation exist between \\(i,j\\) vertices?). This matrix is known as an adjacency matrix (\\(A\\)). An adjancy matrix is binary in the cells (i.e., 1 or 0), typically we exclude self ties (i.e., \\(i,i\\) cells are 0) and is always square. If it is not symmetic then it is a directed graph, and if it is symmetric it is known as undirected graph. Let’s visualize an adjancy matrix in R. g&lt;-rgraph(10) g 2.3 Relational Data Definition 2.5 Relational (network) data} concerns connections among entities, rather than attributes of entities * Entities can be persons, organizations, concepts, etc. * Relations can be interaction, proximity, membership, etc. * Two common forms of data are data (adjacency matrices) and two-mode data (incidence matrices) Definition 2.6 One Mode data – Networks with one vertex class (ie organizations, individuals, concepts, etc.) Represented by adjacency matrices. Vertices on rows and columns, \\(A_{ij}=1\\) if i sends a tie to j, else \\(A_{ij}=0\\). Can contain edge values, where applicable (\\(A_{ij}\\) is value of i,j edge). Symmetric in undirected case, diagonals represent self-ties, often treated as undefined. Example 2.2 The first example is a communication Emergent A communication network of the Emergent Multi-Organizational Network (EMON) of Mt Si SAR, data contained within the network package. R code: library(network) data(emon) #help(emon) n &lt;- ncol(as.sociomatrix(emon[[4]])) colorn &lt;- rainbow(n, start=.7, end=.1) vname &lt;- get.vertex.attribute(emon[[4]],attrname=&quot;vertex.names&quot;) plot.network(emon[[4]], usearrows=FALSE, displayisolates=FALSE,vertex.col=colorn,main=&quot;Mt. Si SAR EMON&quot;) legend(&quot;topleft&quot;,legend=vname, col=colorn, pch=19,bty=&quot;n&quot;,cex=.5) Edge list a,b; c,d; e,f; etc incident matrices Example 2.3 Special Case: Ego Nets– Egocentric network: focal actor (“ego”) and neighbors (“alters”) and ties among alters. What does it tell us: number of ties ego has (neighborhood size), Triangles (3-cliques) containing ego, connections among alters, neighborhood composition (if asked) %find an example graph it and put it here 2.3.1 Some Types of Relationships Conceptual: shared or antithetic properties similarity/difference in individual attributes, correlation among variables, inclusion/exclusion, surface matching on proteins Co-catagorical: shared membership organizational co-membership, event co-participation, co-occurrence of words within texts Nominational: resulting from the behavior of ego +attributions of friendship/enmity, kinship (fictive or otherwise), causal narratives Example 2.4 * Macro-level networks +include: militarized interstate disputes, migration networks (e.g. county-couty migration in the US), interorganizational relations (e.g. SAR EMONs) R code load(&quot;data/cow_adjmats.Rdata&quot;) mid.network&lt;-as.network(mid[[1]]) plot.network(mid.network,displayisolates=FALSE, label=cow.system$State.Abb[(cow.system$Year==1993)], boxed.labels=FALSE, label.cex=.5, main=&quot;COW Militarized interstate disputes 1993&quot;) R code data(emon) imar&lt;-c(5, 4, 4, 2) + 0.1 nmar&lt;-.75*imar par(mfrow=c(2,4), mar=nmar) for(i in 1:7){ plot.network(emon[[i]], usearrows=FALSE, vertex.cex=1.5) mtext(names(emon)[i],side=1, edge.col=&quot;grey&quot;) } Interpersonal networks Communication - e.g. WTC responder radio communications (aggregate and dynamic Friendship - e.g. perceived and estimated friendships among managers Interaction in task performance- e.g. WTC police reports Co-Participation- e.g. research group co-participation in a large research project Citation networks Authorship- e.g. authorship of articles in a large research project hyperreferences- e.g. citations among weblogs Functional Citations- e.g. function calls in the linux kernel Conceptual networks Interval graphs- e.g. life history graphs Mental models- e.g. student concept maps for ``information systemÓ Entailment structures- e.g. latent structure in US religious belief; dependencies within the Bank Wiring Room A special case of a node not attached to any other vertex is known as an isolate and will be carefully definee as a component of size 1. We will discuss this more in the future. 2.4 STATNET Overview Using the network package to handle Network objects. Basics in getting and loading a network example data-set: library(network) # Make sure that network is loaded # help(&quot;network-package&quot;) to get started. data(package=&quot;network&quot;) # List available datasets in network data(flo) # Load a built-in data set; see ?flo for more flo # Examine the flo adjacency matrix Example 2.5 Common network file types are that of the tables (.txt or .csv), Pajek network format (http://vlado.fmf.uni-lj.si/pub/networks/pajek/, UCINET, etc. First find the files “flo.paj” and “floadj.txt” that come within the network package: First we will attempt to bring in a .txt file: flo.paj.location &lt;-&quot;http://vlado.fmf.uni-lj.si/pub/networks/data/GD/gd98/A98.net&quot; Try reading in a Pajek file: flopaj &lt;- read.paj(flo.paj.location) Write to table write.table(flopaj[,],file=&quot;data/floadj.txt&quot;) floadj.txt.location &lt;-&quot;data/floadj.txt&quot; Then read them into adjacency matrix form: floadj &lt;- read.table(floadj.txt.location,header=TRUE) floadj Some other common commands and calls for network class types: names(flopaj) # This is a project file, with networks and other data names(flopaj$networks) # See which networks are in the file nflo2 &lt;- flopaj$networks[[1]] # Extract the marriage data nflo2 # Examine the network object Load “native” R data file( note, may need to change directory). load(&quot;data/nmlec1.Rdata&quot;) # Load example data mids_1993 # Examine one of the imported objects Example 2.6 Other useful R commands in the network package. As always one can delve deeper into these functions via R’s help manuals (either ? or help() ). One of the first things we should look at is network objects, here is a quick example of how to create a network object and pull out some basic network properties. data(flo) nflo &lt;- network(flo, directed=FALSE) nflo # Get a quick description of the data summary(nflo) # Get an overall summary print(nflo) # Simple print method network.dyadcount(nflo) # How many dyads in nflo? network.edgecount(nflo) # How many edges are present? network.size(nflo) # How large is the network? as.sociomatrix(nflo) # Show it as a sociomatrix nflo[,] # Another way to do it An example plot generated by the plot.network() command. The plot on the left is the default Fruchterman and Reingold’s force-directed placement algorithm, where the plot on the right is a circle output. More layouts and information can be found with gplot function. par(mfrow=c(1,2)) plot(nflo,displaylabels=T,boxed.labels=F) plot(nflo,displaylabels=T,mode=&quot;circle&quot;, boxed.labels=F) ``` Generating an empty network can be useful for a number of things. # Create an empty graph with 5 vertices nempty &lt;- network.initialize(5) nempty # Compare with nflo Now, we can look at some basic network properties such as edges. g &lt;- network.initialize(5) # Create an empty graph g[1,2] &lt;- 1 # Add an edge from 1 to 2 g[2,] &lt;- 1 # Add edges from 2 to everyone else m &lt;- matrix(0, nrow=5, ncol=5) m[3,4:5] &lt;- 1 # Add entries from 3 to 4 and 5 g[m&gt;0] &lt;- 1 # Add more entries g[,] Some more useful R tricks with adjancy matrices. # Delete edges g[3,5] &lt;- 0 # Remove the edge from 3 to 5 g[,] &lt;- 0 # Remove all edges #Testing adjacency nflo[9,3] # Medici to Barbadori? nflo[9,] # Entire Medici row nflo[1:4,5:8] # Subsets are possible nflo[-9,-9]# Negative numbers _exclude_ nodes m &lt;- matrix(1:16^2, nrow=16, ncol=16) nflo %e% &quot;boo&quot; &lt;- m # Value the marriage ties #Retrieving edge values list.edge.attributes(nflo) # See what&#39;s available nflo %e% &quot;boo&quot; # Use the %e% operator as.sociomatrix(nflo,attrname=&quot;boo&quot;) Now, we can look at vertex attributes (these include things like node level covariates). #Add some attributes nflo %v% &quot;woo&quot; &lt;- letters[1:16] nflo %n% &quot;zoo&quot; &lt;- &quot;R is TanFastic!&quot; #Listing attributes list.vertex.attributes(nflo) # List all vertex attributes list.network.attributes(nflo) # List all network attributes #Retrieving attributes nflo %v% &quot;woo&quot; # Retrieve the vertex attribute nflo %n% &quot;zoo&quot; # Retrieve the network attribute # ?attribute.methods ``` References "],
["networkvizualization.html", "Chapter 3 Network Vizualization", " Chapter 3 Network Vizualization "],
["network-data-and-measurement.html", "Chapter 4 Network Data and Measurement 4.1 Types of network data", " Chapter 4 Network Data and Measurement 4.1 Types of network data 4.1.1 One mode data One-mode data is network data with one vertex class and can be represented as an adjacency matrix. Simple examples include organizations, individuals, concepts etc. 4.1.2 Two mode data Let A be an \\(N \\times M\\) incidence matrix; the row-projection of A is the \\(N\\times N\\) matrix B such that \\(B_{ij}=\\sum_{k=1}^M A_{ik}A_{jk}\\); likewise, the column projection of A is the \\(M\\times M\\) matrix C such that \\(C_{ij}=\\sum_{k=1}^N A_{ki}A_{kj}\\) Matrix notation \\(B=AA^T\\) and \\(C=A^TA\\). To analyze network data, we must first collect it. Many approaches exist Ð some better than others for particular purposes, this is a complex topic overall, but we will at least skim the surface Two important concepts (not always separable): Common way to elicit ego nets: complete instrument followed by roster We have briefly mentioned this form of data collecting before. One is asked to name those with whom you discussed important matters Then, asked to fill in same question for all pairs of persons named initially (see ). Pros: Relatively easy to administer; don’t need entire list of possible alters; don’t have to ask about all group members. Cons: Step 1, step 2 questions have different error rates; may need large roster if many alters; hard to use with paper-based surveys Can also think of coding schemes for archival materials as ``instruments&quot; How do we define the node or vertex set? If misspecified, theoretically relevant ties may be missed. Major distinction: local versus global properties. Different sampling methods needed for each. "],
["network-descriptive-statistics.html", "Chapter 5 Network Descriptive Statistics", " Chapter 5 Network Descriptive Statistics "],
["references.html", "References", " References "]
]
